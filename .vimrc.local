colorscheme vividchalk
set number

nmap <script> <SID>:    :<C-R>=getcmdline() =~ ',' ? "\0250" : ""<CR>
nmap <script> d<CR>     <SID>:Dispatch<CR>
nmap <script> d<Space>  <SID>:Dispatch<Space>
nmap <script> d!        <SID>:Dispatch!
nmap <script> <SID>make <SID>:<C-R>=exists(':Make') > 1 ? 'Make' : 'make'<CR>
nmap <script> m<CR>     <SID>make<CR>
nmap <script> m<Space>  <SID>make<Space>
nmap <script> m!        <SID>make!

" Is there a better mnemonic than =?
nmap <script> =<CR>     :<C-R>=exists(':Start') > 1 ? 'Start' : 'shell'<CR><CR>
nmap <script> =<Space>  :<C-R>=exists(':Start') > 1 ? 'Start ' : '!'<CR>
nmap <script> =!        :<C-R>=exists(':Start') > 1 ? 'Start!' : '!'<CR>
nmap <script> =c        :Console<CR>

" https://github.com/stefanoverna/vim-i18n
vmap <Leader>z :call I18nTranslateString()<CR>
vmap <Leader>dt :call I18nDisplayTranslation()<CR>

" use jsx synx highlighting for js files
let g:jsx_ext_required = 0

let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"

nnoremap ]c :call search('^\s*'.substitute(escape(&cms, '\.*[]^$'), '%s', '.*', '').'\s*$')<CR>
nnoremap [c :call search('^\s*'.substitute(escape(&cms, '\.*[]^$'), '%s', '.*', '').'\s*$', 'b')<CR>

au FileType xhtml,xml,xslt so ~/.vim/bundle/HTML-AutoCloseTag/ftplugin/html_autoclosetag.vim

augroup XML
    autocmd!
    autocmd FileType xml setlocal foldmethod=indent foldlevelstart=999 foldminlines=0
augroup END

set shiftwidth=2 tabstop=2 expandtab

map <leader>* :Ggrep <cword><CR><CR>

let g:fugitive_bitbucket_domains = ['stash']


" tabular mapping
" http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

" markdown preview with github flavoring
let vim_markdown_preview_github=1
